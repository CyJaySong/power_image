@startuml
'config
class PowerImageRequestOptions {
  final String src;
  final String imageType;
  final String renderingType;
  final double imageWidth;
  final double imageHeight;
}

'img
class PowerImage {
  PowerImageRequestOptions options;
  double width;
  double height;
  BoxFit fit;

  Widget build(BuildContext context)
}

class PowerExternalImage {
  PowerImageRequestOptions options;
  double width;
  double height;
  BoxFit fit;
  Widget build(BuildContext context)
}

class PowerTextureImage {
  PowerImageRequestOptions options;
  double width;
  double height;
  BoxFit fit;
  Widget build(BuildContext context)
}

class ImageExt {
  final ImageProvider image;
  CustomImageBuilder imageBuilder;
}


PowerImage ..> PowerExternalImage
PowerImage ..> PowerTextureImage

PowerTextureImage ..> ImageExt
PowerExternalImage ..> ImageExt

'class ImageCacheExt

'provider
PowerTextureImageProvider --* PowerTextureImageInfo
PowerExternalImageProvider --* ImageInfo

class PowerTextureImageProvider extends PowerImageProvider {
FutureOr<ImageInfo> createImageInfo(Map map)
}
class PowerExternalImageProvider extends PowerImageProvider {
FutureOr<ImageInfo> createImageInfo(Map map)
}
abstract class PowerImageProvider extends ImageProvider


class PowerTextureImageInfo extends ImageInfo



'cache
class PowerImageBinding extends WidgetsFlutterBinding
class ImageCacheExt extends ImageCache
ImageCacheExt --* PowerImageBinding


'channel
class PowerImageChannel {
    PowerImageChannelImpl impl;
    void startImageRequests(List<PowerImageRequest> requests) async;
    void stopImageRequests(List<PowerImageRequest> requests) async;
}
class PowerImagePlatformChannel extends PowerImageChannelImpl {
    const EventChannel('power_image/event');
    const MethodChannel('power_image/method');
}
PowerImageChannel --> PowerImageChannelImpl


@enduml